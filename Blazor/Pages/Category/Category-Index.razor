@page "/category"
@inject HttpClient Http
@inject NavigationManager NavManager

@if (errorActive)
{
    <div class="alert alert-danger" role="alert">
        Impossible de supprimer cette catégorie tant qu'elle est utilisée par des produits !
    </div>
}

<div class="row">
    <div class="col">
        <h4>Liste des catégories</h4>
    </div>

    <div class="col text-right">
        <a class="btn btn-primary btn-sm" href="/category/new"><span class="oi oi-plus mr-1"
                aria-hidden="true"></span>Nouveau</a>
    </div>
</div>

<div class="row">
    <div class="col">
        @if (categories == null)
        {
            <p><em>Chargement ...</em></p>
        }
        else
        {
            <table class="table table-striped table-sm">
                <thead>
                    <tr>
                        <th>Libellé</th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var category in categories)
                    {
                        <tr>
                            <td>@category.Libelle</td>
                            <td class="text-center">
                                <a href="/category/@category.Id"><span class="oi oi-eye text-primary mx-1"
                                aria-hidden="true"></span></a>

                                <a href="/category/edit/@category.Id"><span class="oi oi-pencil text-success mx-1"
                                aria-hidden="true"></span></a>

                                <a href="/category" @onclick="@(e => DeleteCategory(category.Id))"><span
                                class="oi oi-trash text-danger mx-1" aria-hidden="true"></span></a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>


@code {
    private Category[] categories;
    private string errorMessage;
    private bool errorActive = false;

    protected override async Task OnInitializedAsync()
    {
        categories = await Http.GetFromJsonAsync<Category[]>("https://localhost:5001/API/Category");
    }
    private async Task DeleteCategory(int id)
    {
        var response = await Http.DeleteAsync("https://localhost:5001/API/Category/Delete/" + id);
        categories = await Http.GetFromJsonAsync<Category[]>("https://localhost:5001/API/Category");

        if (!response.IsSuccessStatusCode)
        {
            errorActive = true;
            errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error! {errorMessage}");
            return;
        }
        else
        {
            errorActive = false;
        }
    }
}
